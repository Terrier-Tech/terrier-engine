// noinspection JSAnnotator,ES6UnusedImports,TypeScriptCheckImport,TypeScriptValidateTypes,TypeScriptUnresolvedFunction,TypeScriptUnresolvedVariable

<% @imports.each do |path, symbols| %>
  import {<%= symbols.join(', ') %>} from "<%= path %>"
<% end %>

<% models.keys.sort.each do |model_name| %>
  <% model = models[model_name] %>

  export type <%= model_name %> = {
    <% model[:columns].each do |col| -%>
      <% next if model[:attachments].include?(col.name.to_sym) -%>
      <%= col.name %><%= col.null ? '?' : '' %>: <%= typescript_type(col, model[:model_class], model[:enum_fields][col.name.to_sym]) %>
    <% end -%>
    <% model[:reflections].each do |ref_name, ref| -%>
      <% ref_type = compute_ref_type(ref) -%>
      <% next unless ref_type -%>
      <%= ref_name %> ? : <%= ref_type %>
    <% end -%>
    <% model[:attachments].each do |attachment| -%>
      <%= attachment %> ? : File
    <% end -%>
  }

  export type Unpersisted<%= model_name %> = {
    <% model[:columns].each do |col| -%>
      <% next if model[:attachments].include?(col.name.to_sym) -%>
      <%= col.name %><%= col.null || unpersisted_columns.include?(col.name) ? '?' : '' %>: <%= typescript_type(col, model[:model_class], model[:enum_fields][col.name.to_sym]) %>
    <% end -%>
    <% model[:reflections].each do |ref_name, ref| -%>
      <% ref_type = compute_ref_type(ref) -%>
      <% next unless ref_type -%>
      <% if ref_type.include?('[]') -%>
        <% fk = ref.options[:foreign_key].presence || "#{model_name.tableize.singularize}_id" -%>
        <% ref_type = "OptionalProps<Unpersisted#{ref_type.gsub('[]', '')},'#{fk}'>[]" -%>
      <% end -%>
      <%= ref_name %>?: <%= ref_type %>
    <% end -%>
    <% model[:attachments].each do |attachment| -%>
      <%= attachment %>?: File
    <% end -%>
  }

  <% if model[:enum_fields].present? -%>
    export const <%= model_name %>EnumFields = {
    <% model[:enum_fields].each do |col, values| -%>
      <%= col %>: [<%= values.select(&:present?).map{|f| "'#{f}'"}.join(',') %>] as const,
    <% end -%>
    }
  <% end -%>

<% end %>

/**
 * Map model names to their types.
 */
export type PersistedModelTypeMap = {
  <% models.keys.sort.each do |model_name| -%>
    <%= model_name.tableize.singularize %>: <%= model_name %>
  <% end -%>
}

/**
 * Map model names to their unpersisted types.
 */
export type UnpersistedModelTypeMap = {
  <% models.keys.sort.each do |model_name| -%>
    <%= model_name.tableize.singularize %>: Unpersisted<%= model_name %>
  <% end -%>
}

/**
 * Map model names to their association names.
 */
export type ModelIncludesMap = {
  <% models.keys.sort.each do |model_name| -%>
    <% refs = models[model_name][:reflections] -%>
    <%= model_name.tableize.singularize %>: <%= refs.empty? ? 'never' : refs.keys.sort.map{|r| "'#{r}'"}.join(' | ') %>
  <% end -%>
}

/**
 * Map model names to an array of association names.
 */
export const ModelIncludesArrayMap = {
  <% models.keys.sort.each do |model_name| -%>
    <% refs = models[model_name][:reflections] -%>
    <%= model_name.tableize.singularize %>: [<%= refs.keys.sort.map{|r| "'#{r}'"}.join(', ') %>] as const,
  <% end -%>
}

/**
 * Map "sluggable" model names to their types
 */
export type SluggableModelTypeMap = {
  <% models.keys.sort.each do |model_name| -%>
    <% next unless models[model_name][:columns].map(&:name).include?('slug') -%>
    <%= model_name.tableize.singularize %>: <%= model_name %>
  <% end -%>
}

/**
 * A type consisting of all possible model names.
 */
export type ModelName = keyof PersistedModelTypeMap & keyof UnpersistedModelTypeMap