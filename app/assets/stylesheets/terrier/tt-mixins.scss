////////////////////////////////////////////////////////////////////////////////
// Breakpoints
////////////////////////////////////////////////////////////////////////////////

$tablet-breakpoint: 1050px; // tablet landscape
$mobile-breakpoint: 850px; // tablet portrait
$phone-breakpoint: 550px; // phone portrait
$max-fixed-width: 320px; // the max width that any fix sized element should be (presumably the smallest phone width)


////////////////////////////////////////////////////////////////////////////////
// Colors
////////////////////////////////////////////////////////////////////////////////

$color-names: ['link', 'primary', 'secondary', 'active', 'pending', 'success', 'warn', 'alert', 'white', 'inactive', 'super', 'billing', 'docs'];

// sets the --color variable of the container based on the named color classes
@mixin tt-theme-colored {
	@each $name in $color-names {
		&.#{$name} {
			--color: var(--tt-#{$name}-color);
		}
	}
}


////////////////////////////////////////////////////////////////////////////////
// Text
////////////////////////////////////////////////////////////////////////////////

@mixin tt-single-line {
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

// uses --tt-pad to pad the element for use with text (i.e. less vertical than horizontal)
@mixin tt-text-pad {
	padding: calc(var(--tt-pad) * 0.5) var(--tt-pad);
}

// text that's inset but not white
@mixin tt-inset-text {
	text-shadow: 0 1px 0 #fff;
}

// override the default to use our custom white color
@mixin tt-inset-white-text {
	color: var(--tt-white-color);
	text-shadow: 0 -1px 0 rgba(#000, 0.2);
}


// same as tt-inset-text but uses a drop-shadow filter instead of a text-shadow
// meant to be used with a non-white image
@mixin tt-inset-img {
	filter: drop-shadow(0 1px 0 rgba(#fff, 0.2));
}


// same as tt-inset-white-text but uses a drop-shadow filter instead of a text-shadow
// uses a top dark shadow since it's meant to be used with a white image
@mixin tt-inset-white-img {
	filter: drop-shadow(0 -1px 0 rgba(var(--tt-shadow-color), 0.2));
}

// specify the icon size as a fraction of the standard size
@mixin tt-icon-size($ratio) {
	width: calc(var(--tt-icon-size) * #{$ratio});
	height: calc(var(--tt-icon-size) * #{$ratio});
}


////////////////////////////////////////////////////////////////////////////////
// Flex
////////////////////////////////////////////////////////////////////////////////

// include this in tt-flex-like things to get all the convenient helpers
@mixin tt-flex-utils {

	&.large-gap {
		gap: calc(var(--tt-gap) * 2);
	}

	&.small-gap {
		gap: calc(var(--tt-gap) / 2);
	}

	&.no-gap {
		gap: 0;
	}

	&.padded {
		padding: var(--tt-pad);
	}

	&.h-padded {
		padding: 0 var(--tt-pad);
	}

	&.inline {
		display: inline-flex;
	}

	&.column {
		flex-direction: column;
		// to counter foundation's defaults
		float: none;
		width: initial;

		> .full-width {
			align-self: stretch;
		}
	}
	&:not(.column) {
		> .full-height {
			align-self: stretch;
		}
	}

	&.wrap {
		flex-wrap: wrap;
	}

	&.justify-center {
		justify-content: center;
	}

	&.justify-start {
		justify-content: flex-start;
	}

	&.justify-end {
		justify-content: flex-end;
	}

	&.justify-stretch {
		justify-content: stretch;
	}

	&.justify-space-evenly {
		justify-content: space-evenly;
	}

	&.justify-space-between {
		justify-content: space-between;
	}

	&.align-center {
		align-items: center;
	}

	&.align-start {
		align-items: flex-start;
	}

	&.align-end {
		align-items: flex-end;
	}

	&.align-baseline {
		align-items: baseline;
	}

	input[type=text].shrink {
		width: initial;
	}

	> .align-self-center {
		align-self: center;
	}

	> .align-self-start {
		align-self: flex-start;
	}

	> .align-self-end {
		align-self: flex-end;
	}

	> .align-self-stretch {
		align-self: stretch;
	}

}



////////////////////////////////////////////////////////////////////////////////
// Backgrounds
////////////////////////////////////////////////////////////////////////////////

$color-diff: 0.08;

// makes the background slightly dark when hovering and slightly light when clicking
@mixin tt-shaded-hover {
	&:hover {
		background-color: rgba(#000, $color-diff);
		backdrop-filter: blur(1em); // in case there's anything behind it
	}
	&:active {
		background-color: rgba(#fff, $color-diff);
		backdrop-filter: blur(1em);
	}
}

@mixin tt-brighten-hover {
	&:hover {
		filter: brightness(1.08);
	}
	&:active {
		filter: brightness(0.92);
	}
}


@mixin tt-raised-bg($color, $pressable: true, $diff-mult: 1, $disabled: false) {
	$diff: ($color-diff * $diff-mult);
	@if $disabled {
		$transparent-amount: ($color-diff * $diff-mult / 2);
	}
	$light: transparentize(white, 1.0 - $diff);
	$dark: transparentize(black, 1.0 - $diff);

	background: $color linear-gradient($light, $dark);
	background-blend-mode: hard-light;
	@if $pressable {
		&:hover {
			background-image: linear-gradient(opacify($light, $diff), opacify($dark, $diff));
		}
	}
	@if $pressable and not $disabled {
		&:active {
			background-image: linear-gradient(transparentize($dark, $diff / 2), transparentize($light, $diff / 2));
		}
	}
}

@mixin tt-concave-bg($color, $pressable: true, $diff-mult: 0.5) {
	$transparent-amount: ($color-diff * $diff-mult);
	$light: transparentize(white, 1.0 - $transparent-amount);
	$dark: transparentize(black, 1.0 - $transparent-amount);

	background: $color linear-gradient($dark, $light);
	background-blend-mode: hard-light;
	@if $pressable {
		&:hover {
			background-image: linear-gradient(opacify($dark, $transparent-amount), opacify($light, $transparent-amount));
		}
	}
}

@mixin tt-inset-box {
	@include tt-rounded-corners;
	background-color: var(--tt-inset-background);
	&.padded {
		padding: var(--tt-pad);
	}
}

////////////////////////////////////////////////////////////////////////////////
// Rounded Corners
////////////////////////////////////////////////////////////////////////////////

@mixin tt-rounded-corners {
	border-radius: var(--tt-border-radius);
}

@mixin tt-top-rounded-corners {
	border-top-left-radius: var(--tt-border-radius);
	border-top-right-radius: var(--tt-border-radius);
}

@mixin tt-bottom-rounded-corners {
	border-bottom-left-radius: var(--tt-border-radius);
	border-bottom-right-radius: var(--tt-border-radius);
}

@mixin tt-left-rounded-corners {
	border-top-left-radius: var(--tt-border-radius);
	border-bottom-left-radius: var(--tt-border-radius);
}

@mixin tt-right-rounded-corners {
	border-top-right-radius: var(--tt-border-radius);
	border-bottom-right-radius: var(--tt-border-radius);
}


////////////////////////////////////////////////////////////////////////////////
// Panels
////////////////////////////////////////////////////////////////////////////////

@mixin panel-like {
	@include tt-rounded-corners;
	background: var(--tt-panel-background);
	@include tt-box-shadow;
}


////////////////////////////////////////////////////////////////////////////////
// Interactions
////////////////////////////////////////////////////////////////////////////////

@mixin tt-no-select {
	-webkit-user-select: none; /* Chrome all / Safari all */
	-moz-user-select: none; /* Firefox all */
	-ms-user-select: none; /* IE 10+ */
	user-select: none;
}

@mixin tt-box-shadow {
	box-shadow: 0 calc(var(--tt-shadow-spread) / 2) var(--tt-shadow-spread) var(--tt-shadow-color);
}

@mixin tt-hover-box-shadow {
	box-shadow: 0 calc(var(--tt-shadow-spread) ) calc(var(--tt-shadow-spread)*2) var(--tt-shadow-color);
}

@mixin tt-active-box-shadow {
	box-shadow: 0 calc(var(--tt-shadow-spread) / 4 ) calc(var(--tt-shadow-spread)/2) var(--tt-shadow-color);
}

@mixin tt-inset-box-shadow {
	box-shadow: inset 0 calc(var(--tt-shadow-spread) / 2) var(--tt-shadow-spread) var(--tt-shadow-color);
}

// same as tt-box-shadow but at a 45 degree angle
@mixin tt-box-shadow-45($height: 2, $opacity:  0.1) {
	box-shadow: calc(var(--tt-shadow-spread) / 2) calc(var(--tt-shadow-spread) / 2) var(--tt-shadow-spread) var(--tt-shadow-color);
}

@mixin tt-scale-push {
	@include tt-no-select;
	&:hover {
		transform: scale(calc(1 + var(--tt-scale-push-factor)));
	}
	&:active {
		transform: scale(calc(1 - var(--tt-scale-push-factor)));
	}
}

@mixin tt-absolute-fill {
	position: absolute;
	left: 0;
	right: 0;
	top: 0;
	bottom: 0;
}

@mixin tt-fixed-fill {
	position: fixed;
	left: 0;
	right: 0;
	top: 0;
	bottom: 0;
}


////////////////////////////////////////////////////////////////////////////////
// Buttons
////////////////////////////////////////////////////////////////////////////////

@mixin tt-button {
	--iconSize: var(--tt-icon-size);
	--fontSize: calc(var(--iconSize) / 2);
	--color: var(--tt-primary-color);
	border-radius: calc(var(--iconSize) * 2);
	@include tt-theme-colored;

	display: flex;
	justify-content: center;
	align-items: center;
	position: relative;
	gap: 0; // let the title padding take care of this

	line-height: 1;
	font-weight: bold;
	font-size: var(--fontSize);
	text-align: center;
	@include tt-no-select;

	min-height: var(--tt-button-height);
	padding: calc((var(--tt-button-height) - var(--tt-icon-size))/2) calc((var(--tt-button-height) - var(--tt-icon-size))*2);

	@include tt-inset-white-text;
	@include tt-raised-bg(#{var(--color)});

	div.icon {
		img, svg {
			width: var(--iconSize);
			height: var(--iconSize);
			fill: var(--tt-white-color);
			@include tt-inset-white-img;

			* {
				color: var(--tt-white-color);
			}
		}
	}
	i {
		font-size: var(--iconSize);
		display: block;
	}

	.title, span {
		padding: 8px;
		&.stretch {
			flex: 1 1 auto;
		}
	}

	&.large {
		gap: calc(var(--tt-gap) / 2);
		--iconSize: calc(var(--tt-icon-size) * 1.5);
	}
	&.x-large {
		gap: calc(var(--tt-gap) / 2);
		--iconSize: calc(var(--tt-icon-size) * 2);
	}
	&.xx-large {
		gap: calc(var(--tt-gap) / 2);
		--iconSize: calc(var(--tt-icon-size) * 3);
	}
	&.xxx-large {
		gap: calc(var(--tt-gap) / 2);
		--iconSize: calc(var(--tt-icon-size) * 4);
	}

	&.circle {
		min-height: var(--tt-button-height);
		height: calc(var(--iconSize) + 12px);
		aspect-ratio: 1;
		padding: 0;
		border-radius: 50%;

		&.compact {
			min-height: unset;
			height: var(--iconSize);
		}
		&.spacious {
			i {
				font-size: calc(var(--iconSize) * .8);
			}
			img, svg {
				width: calc(var(--iconSize) * .8);
				height: calc(var(--iconSize) * .8);
			}
		}
	}

	&.inline {
		display: inline-flex;
	}
}

////////////////////////////////////////////////////////////////////////////////
// Bubbles
////////////////////////////////////////////////////////////////////////////////

@mixin tt-bubble($clickable: false) {
	display: flex;
	gap: 0.5em;
	padding: 1em;
	@include tt-rounded-corners;
	@include tt-inset-white-text;
	text-align: center;
	font-weight: bold;
	&.white {
		// can't have white text on white background
		color: var(--tt-body-color);
	}
	ul {
		margin: 0;
		padding-left: 1em;
		li {
			text-align: left;
		}
	}
	@include tt-theme-colored;
	background-color: var(--color);
	&.alert {
		color: #fff; // to override .alert styling elsewhere
	}
	line-height: 1.3;
	.backtrace {
		overflow-x: scroll;
		padding: 1em;
		.line {
			line-height: 1.4;
			text-align: left;
			font-weight: normal;
		}
	}
}


////////////////////////////////////////////////////////////////////////////////
// Blur
////////////////////////////////////////////////////////////////////////////////

@mixin tt-blur-background {
	--duration: 0.2s;
	transition: backdrop-filter, background-color var(--duration) ease-in-out;
	backdrop-filter: blur(0);
	&.active, &.show {
		backdrop-filter: blur(8px);
	}
}