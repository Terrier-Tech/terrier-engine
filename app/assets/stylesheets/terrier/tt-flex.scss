@import "tt-mixins";


.tt-flex {
	display: flex;
	gap: 0;
	padding: 0;
	align-content: flex-start;

	@include tt-flex-utils;

	&.h-gap {
		row-gap: 0;
	}

	&.gap {
		gap: var(--tt-gap);
	}


	@mixin stretch {
		flex: 1 1 auto;
	}
	@mixin shrink {
		flex: 0 0 auto;
	}

	> div, > label, > *.stretch, &.shrink-items > *.stretch {
		// default is stretch
		@include stretch;
		min-width: 1em;
		min-height: 1em;
	}

	&.shrink-items > div, &.shrink-items > label, &.shrink-items > *.shrink, > *.shrink {
		@include shrink;
	}
}

a.tt-flex {
	gap: 0.5em;
	&.alert {
		color: var(--tt-alert-color);
	}
}


@media screen and (max-width: $phone-breakpoint) {
	.tt-flex.phone-collapsible {
		flex-direction: column;
	}
}

@media screen and (max-width: $mobile-breakpoint) {
	.tt-flex.mobile-collapsible {
		flex-direction: column;
	}
}

@media screen and (max-width: $tablet-breakpoint) {
	.tt-flex.tablet-collapsible {
		flex-direction: column;
	}
}


////////////////////////////////////////////////////////////////////////////////
// Container Breakpoints
////////////////////////////////////////////////////////////////////////////////

// Apply this to parents of .flex elements for whom you'd like to
// use the container-based collapsible classes below
.breakpoint-container {
	container-type: inline-size;
}

@container (max-width: #{$tablet-breakpoint}) {
	.tt-flex.container-tablet-collapsible {
		flex-direction: column;
	}
}

@container (max-width: #{$mobile-breakpoint}) {
	.tt-flex.container-mobile-collapsible {
		flex-direction: column;
	}
}

@container (max-width: #{$phone-breakpoint}) {
	.tt-flex.container-phone-collapsible {
		flex-direction: column;
	}
}
