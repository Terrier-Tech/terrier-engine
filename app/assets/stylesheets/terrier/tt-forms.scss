@import "tt-mixins";


.tt-form {

	// text-like fields
	input[type=text], input[type=number], input[type=email], input[type=tel], input[type=search], input[type=date], select, textarea {
		margin: 0;
		font-size: var(--tt-body-font-size);
		min-height: var(--tt-field-height);
		@include tt-rounded-corners;
		border: 1px solid var(--tt-field-border-color);
		padding: 0 0.6em;
		width: 100%;
		&.error {
			border-color: var(--tt-alert-color);
		}
	}

	// text area
	textarea {
		padding: 0.6em;
	}

	// checkboxes and radio buttons
	input[type=checkbox], input[type=radio] {
		margin: 0;
		width: 1.5em;
		height: 1.5em;
		cursor: pointer;
	}

	// all labels are flex
	label {
		display: flex;
		gap: 0.8em;
		line-height: 1.3;
		align-items: center;
		&.caption-size {
			font-size: var(--tt-caption-font-size);
		}
		&.body-size {
			font-size: var(--tt-body-font-size);
		}
	}
}

.tt-readonly-field {
	margin: 0;
	font-size: var(--tt-body-font-size);
	min-height: var(--tt-field-height);
	@include tt-rounded-corners;
	border: 1px solid var(--tt-field-border-color);
	display: flex;
	align-items: center;
	padding: 0 0.6em;
	gap: 0.6em;
	flex: 1 1 auto;
	background-color: var(--tt-inactive-background);
	i {
		transform: scale(1.25);
	}
}


.tt-compound-field {
	@include tt-rounded-corners;
	@include tt-concave-bg(#{var(--tt-field-background)}, false);
	display: flex;
	align-items: stretch;

	border: 1px solid var(--tt-field-border-color);

	> *:not(:last-child) {
		border-right: 1px solid var(--tt-field-border-color);
	}

	// checkboxes and radios can't have a right border like everything else,
	// so add a left border to the element after it
	> input[type=checkbox], > input[type=radio] {
		& + * {
			border-left: 1px solid var(--tt-field-border-color);
		}
	}

	&.inline {
		display: inline-flex;
	}

	input[type=text], input[type=number], input[type=email], input[type=tel], input[type=search], input[type=date], select, textarea, .readonly-field, .field_with_errors, ul {
		flex: 1 1 auto;
		margin-bottom: 0;
		display: block;
		min-height: var(--tt-field-height);

		&.shrink { // for when it's next to another field
			flex: 0 1 auto;
			width: initial;
		}

		border-radius: 0;
		border: none;

		&:first-child {
			@include tt-left-rounded-corners;
		}

		&:last-child {
			@include tt-right-rounded-corners;
		}

		&:not(:last-child) {
			border-right: 1px solid var(--tt-field-border-color);
		}
	}

	input[type=checkbox], input[type=radio] {
		align-self: center;
		margin: 0 14px; // can't use padding on checkbox/radio, but we need space. so margin
		flex: 1 1 auto;

		&.shrink {
			flex: 0 1 auto;
			width: initial;
		}
	}

	ul {
		margin-bottom: 0;
		display: inline-flex;
	}

	label, a {
		flex: 0 0 auto;
		display: block;
		min-height: var(--tt-field-height);
		font-size: var(--tt-caption-font-size);
		padding: 11px 14px;
		margin-bottom: 0 !important;
		opacity: 1;
		text-shadow: 0 1px 0 #fff;
		line-height: 1;

		&:first-child {
			@include tt-left-rounded-corners;
		}

		&:last-child {
			@include tt-right-rounded-corners;
		}

		&.icon-only i {
			display: block;
			transform: scale(1.5);
		}
	}

	label {
		text-transform: none;
	}

	ul.button-group {
		margin-bottom: 0;

		li:first-child a.button {
			border-top-left-radius: 0;
			border-bottom-left-radius: 0;
		}
	}

	a {
		@include tt-raised-bg(#{var(--tt-field-background)}, true);
		color: var(--tt-secondary-color);
		cursor: pointer;

		&.button {
			color: #fff;
		}
	}

	.field_with_errors:last-child > * {
		@include tt-right-rounded-corners;
	}
}

// Used to indicate to the user that an element has changed
.tt-changed::after {
	content: "";
	position: absolute;
	inset: -1px;
	border-radius: var(--tt-border-radius);
	border: 2px var(--tt-changed-color, var(--tt-pending-color)) solid;
	background-color: color-mix(
					in srgb,
					var(--tt-changed-color, var(--tt-pending-color)) var(--tt-changed-glow-intensity, 3%),
					transparent
	);
	pointer-events: none;
}