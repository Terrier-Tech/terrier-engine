@import 'tt-mixins';

////////////////////////////////////////////////////////////////////////////////
// Stack
////////////////////////////////////////////////////////////////////////////////

.tt-modal-stack {
	position: fixed;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	--modal-pad: calc(var(--tt-pad) * 2);
	@include tt-blur-background;

	// use flex so that we can fit the .modal-container directly
	// in the center but have it full height (minus padding)
	display: flex;
	flex-direction: column;
	align-items: center;
	padding: var(--modal-pad);

	// all modals go in here, directly on top of each other
	// then they're arranged with transforms based on their position in the stack
	.modal-container {
		width: var(--tt-content-width);
		flex: 1 1 auto;
		max-width: 96%;
		position: relative;
	}

	// very minimal show/hide so that the actual modals can animate
	pointer-events: none;

	&.show {
		pointer-events: initial;
	}
}


////////////////////////////////////////////////////////////////////////////////
// Modal
////////////////////////////////////////////////////////////////////////////////

.tt-modal-stack .modal-part {
	@include tt-rounded-corners;
	@include tt-box-shadow;
	@include tt-absolute-fill;
	margin: 0 auto;
	background: var(--tt-panel-background);
	display: flex;
	flex-direction: column;

	.modal-header, .modal-actions {
		display: flex;
		padding: var(--tt-pad);
		gap: var(--tt-gap);
		flex: 0 0 auto;
		align-items: center;
	}

	.modal-header {
		border-bottom: 1px solid var(--tt-border-color);
		h2, i {
			font-size: var(--tt-modal-header-font-size);
		}
		i {
			display: block;
			transform: scale(1.2);
		}
		h2 {
			flex: 1 1 auto;
			min-width: 0;
			font-weight: normal;
		}

		a {
			@include tt-scale-push;
			line-height: 0;
			text-align: center;
			display: block;
			position: relative;

			.title {
				position: relative;
				height: 0;
				top: 0.5em;
				font-size: 75%;
			}
			i.close {
				font-size: 24px;
				line-height: 0;
			}
		}
	}

	.modal-actions {
		border-top: 1px solid var(--tt-border-color);

		.primary-actions, .secondary-actions {
			display: flex;
			align-items: center;
			gap: var(--tt-pad);
		}

		.secondary-actions {
			flex: 1 1 auto;
		}

		a {
			@include tt-button;
		}

		&.loading {
			filter: blur(16px);
		}
	}

	.modal-content {
		flex: 1 1 auto;
		min-height: 0;
		overflow-y: scroll;
		overflow-x: hidden;
	}

	&.v-shrink {
		top: unset;
		bottom: unset;
	}

	&:last-child {
		transform: scale(0);
	}

	transition: transform 0.2s ease;

	// fan out the models based on their position in the stack
	&.show {
		&:last-child {
			transform: scale(1);
		}

		@for $i from 1 through 6 {
			&:nth-last-child(#{$i + 1}) {
				transform: translate(calc(-#{$i}*var(--tt-pad)*3), 0) scale(100%-$i*4%);
			}
		}
	}
}